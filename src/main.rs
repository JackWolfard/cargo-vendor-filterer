use anyhow::{anyhow, Context, Result};
use camino::{Utf8Path, Utf8PathBuf};
use cargo_metadata::{CargoOpt::AllFeatures, MetadataCommand};
use clap::Parser;
use serde::{Deserialize, Serialize};
use std::collections::{BTreeMap, HashSet};
use std::io::{BufReader, Write};
use std::process::Command;

/// This is the .cargo-checksum.json in a crate/package.
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
struct CargoChecksums {
    files: BTreeMap<String, String>,
    package: String,
}

/// The minimal bits of Cargo.toml we need.
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
struct CargoManifest {
    package: CargoPackage,
    features: BTreeMap<String, Vec<String>>,
}

/// The minimal bits of the `[package]` section in Cargo.toml we need.
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
struct CargoPackage {
    name: String,
    version: String,
    edition: String,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
enum OutputTarget {
    Dir,
    //    Tar,
}

impl Default for OutputTarget {
    fn default() -> Self {
        Self::Dir
    }
}

impl clap::ValueEnum for OutputTarget {
    fn value_variants<'a>() -> &'a [Self] {
        &[Self::Dir]
    }

    fn to_possible_value<'a>(&self) -> Option<clap::PossibleValue<'a>> {
        match self {
            Self::Dir => Some(clap::PossibleValue::new("dir")),
        }
    }
}

/// Enhanced `cargo vendor` with filtering
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Only include crates for a Linux build
    #[clap(long)]
    linux_only: bool,

    /// Exclude the given crates
    #[clap(long)]
    exclude: Vec<String>,

    /// Enable all features
    #[clap(long)]
    all_features: bool,

    #[clap(long, value_parser, default_value = "dir")]
    format: OutputTarget,

    /// The output path
    #[clap(default_value = "vendor")]
    path: Utf8PathBuf,
}

/// Given a directory for a package generated by `cargo vendor`, replace it
/// with an empty package.  This follows the approach suggested here
/// https://github.com/rust-lang/cargo/issues/7058#issuecomment-697074341
///
/// Entirely removing the crates would require editing the dependency graph,
/// which gets into more work.
fn replace_with_stub(path: &Utf8Path) -> Result<()> {
    let mut command = MetadataCommand::new();
    command.manifest_path(path.join("Cargo.toml"));
    command.no_deps();
    let meta = command.exec().context("Executing cargo metadata")?;
    let root = meta
        .packages
        .get(0)
        .ok_or_else(|| anyhow!("Failed to find root package in {path}"))?;
    let name = &root.name;
    let version = &root.version;
    let edition = &root.edition;
    let checksums_path = path.join(".cargo-checksum.json");
    let checksums = std::fs::File::open(&checksums_path).map(BufReader::new)?;
    let mut checksums: CargoChecksums =
        serde_json::from_reader(checksums).with_context(|| format!("Parsing {checksums_path}"))?;

    // Clear out everything and replace it with a fresh directory with a new `src/`
    // subdir.
    std::fs::remove_dir_all(path)?;
    std::fs::create_dir_all(path.join("src"))?;
    // Also empty out the file checksums, but keep the overall package checksum.
    checksums.files.clear();

    // Helper to both write a file and compute its sha256, storing it in the
    // cargo checksum list.
    let mut writef = |path: &Utf8Path, contents: &str| {
        std::fs::write(path, contents)?;
        let digest =
            openssl::hash::hash(openssl::hash::MessageDigest::sha256(), contents.as_bytes())?;
        let digest = hex::encode(digest);
        checksums.files.insert(path.to_string(), digest);
        Ok::<_, anyhow::Error>(())
    };
    let features = root
        .features
        .iter()
        .map(|(k, _)| (k.clone(), Vec::new()))
        .collect();
    let new_manifest = CargoManifest {
        package: CargoPackage {
            name: name.to_string(),
            edition: edition.to_string(),
            version: version.to_string(),
        },
        features,
    };
    let new_manifest = toml::to_string(&new_manifest)?;
    // An empty Cargo.toml
    writef(&path.join("Cargo.toml"), &new_manifest)?;
    // And an empty source file
    writef(&path.join("src/lib.rs"), "")?;
    // Finally, serialize the new checksums
    let mut w = std::fs::File::create(checksums_path).map(std::io::BufWriter::new)?;
    serde_json::to_writer(&mut w, &checksums)?;
    w.flush()?;
    Ok(())
}

fn run() -> Result<()> {
    let args = Args::parse();
    let mut command = MetadataCommand::new();
    if args.all_features {
        command.features(AllFeatures);
    }
    // TODO: verify by cross checking all tier1 platforms that the dependency set is exactly
    // the same.
    let other_args = args
        .linux_only
        .then(|| String::from("--filter-platform=x86_64-unknown-linux-gnu"))
        .into_iter();
    command.other_options(other_args.collect::<Vec<_>>());
    let meta = command.exec().context("Executing cargo metadata")?;
    let packages = &meta.packages;

    if args.path.exists() {
        anyhow::bail!("Refusing to operate on extant directory: {}", args.path);
    }

    let status = Command::new("cargo")
        .args(&["vendor"])
        .arg(args.path.as_str())
        .status()?;
    if !status.success() {
        anyhow::bail!("Failed to execute cargo vendor: {:?}", status);
    }

    let root = meta.root_package().map(|p| &p.id);

    let mut pkgs_by_name = BTreeMap::<_, Vec<_>>::new();
    for pkg in packages {
        let name = pkg.name.as_str();
        // Skip ourself
        if let Some(rootid) = root {
            if &pkg.id == rootid {
                continue;
            }
        }
        // Also skip anything not from crates.io
        if pkg
            .source
            .as_ref()
            .filter(|source| source.is_crates_io())
            .is_none()
        {
            println!("Skipping {name}");
            continue;
        }

        let v = pkgs_by_name.entry(name).or_default();
        let name_version = format!("{name}-{}", pkg.version);
        v.push((name_version, pkg));
    }

    let mut unversioned_packages = BTreeMap::new();
    let mut multiversioned_packages = BTreeMap::new();
    for (name, versions) in pkgs_by_name {
        let mut versions = versions.into_iter().peekable();
        let first = versions.next().unwrap();
        if versions.peek().is_some() {
            for (version, pkg) in std::iter::once(first).chain(versions) {
                multiversioned_packages.insert(version, pkg);
            }
        } else {
            assert!(unversioned_packages.insert(name, first.1).is_none());
        }
    }

    let mut package_filenames = BTreeMap::new();
    for (name, pkg) in unversioned_packages {
        let name_path = args.path.join(name);
        if !name_path.exists() {
            anyhow::bail!("Failed to find vendored dependency: {name}");
        }
        package_filenames.insert(name.to_string(), pkg);
    }

    // When writing out packages that have multiple versions, `cargo vendor`
    // appears to use an algorithm where the first (or highest version?)
    // is just $name, then all other versions end up as $name-$version.
    // We build up a map of those here to their original package.
    for (namever, pkg) in multiversioned_packages {
        let name = &pkg.name;
        let namever_path = args.path.join(&namever);
        let name_path = args.path.join(name);
        if namever_path.exists() {
            package_filenames.insert(namever, pkg);
        } else if name_path.exists() {
            package_filenames.insert(pkg.name.to_string(), pkg);
        } else {
            anyhow::bail!("Failed to find vendored dependency: {namever}");
        }
    }

    let mut pbuf = args.path.clone();
    let mut unreferenced = HashSet::new();
    // First pass, find and physically delete unreferenced packages, also
    // gathering up the set of packages that we deleted.
    for entry in args.path.read_dir_utf8()? {
        let entry = entry?;
        let name = entry.file_name();
        pbuf.push(name);

        if !package_filenames.contains_key(name) {
            replace_with_stub(&pbuf).with_context(|| format!("Replacing with stub: {name}"))?;
            println!("Replacing unreferenced package with stub: {name}");
            assert!(unreferenced.insert(name.to_string()));
        }

        debug_assert!(pbuf.pop());
    }

    Ok(())
}

fn main() {
    if let Err(e) = run() {
        eprintln!("{:#}", e);
        std::process::exit(1);
    }
}
